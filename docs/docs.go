// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/patients/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only doctors can delete patient records",
                "tags": [
                    "Patients"
                ],
                "summary": "Delete a patient record",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Patient ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Patient record deleted successfully"
                    },
                    "400": {
                        "description": "Validation error, invalid input, or invalid patient ID",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden (e.g., if trying to update restricted fields)",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "404": {
                        "description": "Patient not found",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Receptionists can update most patient details. Doctors can update patient details, especially medical history.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Patients"
                ],
                "summary": "Update patient details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Patient ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patient Update Data (fields to update)",
                        "name": "patientRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PatientUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Patient"
                        }
                    },
                    "400": {
                        "description": "Validation error, invalid input, or invalid patient ID",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden (e.g., if trying to update restricted fields)",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "404": {
                        "description": "Patient not found",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    }
                }
            }
        },
        "/visits/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Doctors can update patient visit details they recorded. Doctor ID is taken from authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Update a specific patient visit",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Visit ID (UUID) for which to update details",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patient visit details to update",
                        "name": "visit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PatientVisitUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PatientVisit"
                        }
                    },
                    "400": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "404": {
                        "description": "Visit not found",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    }
                }
            }
        },
        "/visits/{id}/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Doctors and Receptionists can list patient visits for a specific patient.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "List patient visits for a specific patient",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Patient ID (UUID) for which to list visits",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Added validation",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Added validation",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid patient ID format",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.APIError": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Can be map[string]string for validation errors, or a simple string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female",
                "other"
            ],
            "x-enum-varnames": [
                "GenderMale",
                "GenderFemale",
                "GenderOther"
            ]
        },
        "model.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "The actual list of items"
                },
                "limit": {
                    "description": "The limit used for this page",
                    "type": "integer"
                },
                "offset": {
                    "description": "The offset used for this page",
                    "type": "integer"
                },
                "page": {
                    "description": "Current page number (calculated: offset/limit + 1)",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of items available across all pages",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "Total pages (calculated: ceil(total/limit))",
                    "type": "integer"
                }
            }
        },
        "model.Patient": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_phone": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "description": "Recommended to store as full timestamp, format for display",
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/model.Gender"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "medical_history": {
                    "type": "string"
                },
                "registered_by_user_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.PatientUpdateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500
                },
                "contact_email": {
                    "type": "string",
                    "maxLength": 255
                },
                "contact_phone": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "gender": {
                    "enum": [
                        "male",
                        "female",
                        "other",
                        "prefer_not_to_say"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Gender"
                        }
                    ]
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "medical_history": {
                    "description": "Doctors can update this",
                    "type": "string"
                }
            }
        },
        "model.PatientVisit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "diagnosis": {
                    "type": "string"
                },
                "doctor_id": {
                    "description": "The user ID of the doctor who conducted the visit",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "description": "Additional notes by doctor or about the visit",
                    "type": "string"
                },
                "patient_id": {
                    "type": "string"
                },
                "prescription": {
                    "type": "string"
                },
                "symptoms": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "visit_date": {
                    "description": "Timestamp of the visit",
                    "type": "string"
                }
            }
        },
        "model.PatientVisitUpdateRequest": {
            "type": "object",
            "properties": {
                "diagnosis": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "prescription": {
                    "type": "string"
                },
                "symptoms": {
                    "type": "string"
                },
                "visit_date": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "HMS API",
	Description:      "Hospital Management System API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
