// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password_hash, role, first_name, last_name, email, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Role         UserRole
	FirstName    pgtype.Text
	LastName     pgtype.Text
	Email        pgtype.Text
	IsActive     pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// For actual deletion. Consider deactivating (is_active = false) instead.
func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at FROM users
WHERE username = $1 AND is_active = TRUE LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserActiveStatus = `-- name: SetUserActiveStatus :one
UPDATE users
SET is_active = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at
`

type SetUserActiveStatusParams struct {
	ID       pgtype.UUID
	IsActive pgtype.Bool
}

func (q *Queries) SetUserActiveStatus(ctx context.Context, arg SetUserActiveStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserActiveStatus, arg.ID, arg.IsActive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = COALESCE($1, first_name),
    last_name = COALESCE($2, last_name),
    email = COALESCE($3, email),
    is_active = COALESCE($4, is_active),
    role = COALESCE($5, role),
    password_hash = COALESCE($6, password_hash), -- Be careful updating password
    updated_at = NOW()
WHERE id = $7
RETURNING id, username, password_hash, role, first_name, last_name, email, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName    pgtype.Text
	LastName     pgtype.Text
	Email        pgtype.Text
	IsActive     pgtype.Bool
	Role         NullUserRole
	PasswordHash pgtype.Text
	ID           pgtype.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsActive,
		arg.Role,
		arg.PasswordHash,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
