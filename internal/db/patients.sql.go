// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patients.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPatients = `-- name: CountPatients :one
SELECT COUNT(*) FROM patients
WHERE deleted_at IS NULL
`

func (q *Queries) CountPatients(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPatients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    first_name, last_name, date_of_birth, gender,
    contact_phone, contact_email, address, medical_history,
    registered_by_user_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at
`

type CreatePatientParams struct {
	FirstName          string
	LastName           string
	DateOfBirth        pgtype.Date
	Gender             NullGenderEnum
	ContactPhone       pgtype.Text
	ContactEmail       pgtype.Text
	Address            pgtype.Text
	MedicalHistory     pgtype.Text
	RegisteredByUserID pgtype.UUID
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.ContactPhone,
		arg.ContactEmail,
		arg.Address,
		arg.MedicalHistory,
		arg.RegisteredByUserID,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.Address,
		&i.MedicalHistory,
		&i.RegisteredByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPatientByID = `-- name: GetPatientByID :one
SELECT id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at FROM patients
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetPatientByID(ctx context.Context, id pgtype.UUID) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.Address,
		&i.MedicalHistory,
		&i.RegisteredByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeletePatient = `-- name: HardDeletePatient :exec
DELETE FROM patients
WHERE id = $1
`

func (q *Queries) HardDeletePatient(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, hardDeletePatient, id)
	return err
}

const listPatients = `-- name: ListPatients :many
SELECT id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at FROM patients
WHERE deleted_at IS NULL
ORDER BY last_name, first_name
LIMIT $1
OFFSET $2
`

type ListPatientsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPatients(ctx context.Context, arg ListPatientsParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.DateOfBirth,
			&i.Gender,
			&i.ContactPhone,
			&i.ContactEmail,
			&i.Address,
			&i.MedicalHistory,
			&i.RegisteredByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeletePatient = `-- name: SoftDeletePatient :one
UPDATE patients
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at
`

func (q *Queries) SoftDeletePatient(ctx context.Context, id pgtype.UUID) (Patient, error) {
	row := q.db.QueryRow(ctx, softDeletePatient, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.Address,
		&i.MedicalHistory,
		&i.RegisteredByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET
    first_name = COALESCE($1, first_name),
    last_name = COALESCE($2, last_name),
    date_of_birth = COALESCE($3, date_of_birth),
    gender = COALESCE($4, gender),
    contact_phone = COALESCE($5, contact_phone),
    contact_email = COALESCE($6, contact_email),
    address = COALESCE($7, address),
    medical_history = COALESCE($8, medical_history),
    updated_at = NOW()
WHERE id = $9 AND deleted_at IS NULL
RETURNING id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at
`

type UpdatePatientParams struct {
	FirstName      pgtype.Text
	LastName       pgtype.Text
	DateOfBirth    pgtype.Date
	Gender         NullGenderEnum
	ContactPhone   pgtype.Text
	ContactEmail   pgtype.Text
	Address        pgtype.Text
	MedicalHistory pgtype.Text
	ID             pgtype.UUID
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatient,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
		arg.ContactPhone,
		arg.ContactEmail,
		arg.Address,
		arg.MedicalHistory,
		arg.ID,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.Address,
		&i.MedicalHistory,
		&i.RegisteredByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePatientMedicalInfo = `-- name: UpdatePatientMedicalInfo :one
UPDATE patients
SET
    medical_history = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, first_name, last_name, date_of_birth, gender, contact_phone, contact_email, address, medical_history, registered_by_user_id, created_at, updated_at, deleted_at
`

type UpdatePatientMedicalInfoParams struct {
	ID             pgtype.UUID
	MedicalHistory pgtype.Text
}

// Specific update for doctor (e.g., only medical_history)
func (q *Queries) UpdatePatientMedicalInfo(ctx context.Context, arg UpdatePatientMedicalInfoParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatientMedicalInfo, arg.ID, arg.MedicalHistory)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Gender,
		&i.ContactPhone,
		&i.ContactEmail,
		&i.Address,
		&i.MedicalHistory,
		&i.RegisteredByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
