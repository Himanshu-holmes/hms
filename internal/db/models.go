// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GenderEnum string

const (
	GenderEnumMale           GenderEnum = "male"
	GenderEnumFemale         GenderEnum = "female"
	GenderEnumOther          GenderEnum = "other"
	GenderEnumPreferNotToSay GenderEnum = "prefer_not_to_say"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum
	Valid      bool // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type UserRole string

const (
	UserRoleReceptionist UserRole = "receptionist"
	UserRoleDoctor       UserRole = "doctor"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Patient struct {
	ID                 pgtype.UUID
	FirstName          string
	LastName           string
	DateOfBirth        pgtype.Date
	Gender             NullGenderEnum
	ContactPhone       pgtype.Text
	ContactEmail       pgtype.Text
	Address            pgtype.Text
	MedicalHistory     pgtype.Text
	RegisteredByUserID pgtype.UUID
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
	DeletedAt          pgtype.Timestamptz
}

type PatientVisit struct {
	ID           pgtype.UUID
	PatientID    pgtype.UUID
	DoctorID     pgtype.UUID
	VisitDate    pgtype.Timestamptz
	Symptoms     pgtype.Text
	Diagnosis    pgtype.Text
	Prescription pgtype.Text
	Notes        pgtype.Text
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type User struct {
	ID           pgtype.UUID
	Username     string
	PasswordHash string
	Role         UserRole
	FirstName    pgtype.Text
	LastName     pgtype.Text
	Email        pgtype.Text
	IsActive     pgtype.Bool
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}
